"use strict";var grunt=require("../../lib/grunt");exports["task.normalizeMultiTaskFiles"]={setUp:function(e){this.cwd=process.cwd();process.chdir("test/fixtures/files");e()},tearDown:function(e){process.chdir(this.cwd);e()},normalize:function(e){e.expect(7);var t,n,r,i,s=grunt.util._.flatten;r="dist/built.js";i="src/*1.js";t=grunt.task.normalizeMultiTaskFiles(i,r);n=[{dest:"dist/built.js",src:["src/file1.js"],orig:{dest:r,src:[i]}}];e.deepEqual(t,n,"should normalize destTarget: srcString.");r="dist/built.js";i=[["src/*1.js"],["src/*2.js"]];t=grunt.task.normalizeMultiTaskFiles(i,r);n=[{dest:"dist/built.js",src:["src/file1.js","src/file2.js"],orig:{dest:r,src:s(i)}}];e.deepEqual(t,n,"should normalize destTarget: srcArray.");i={src:["src/*1.js","src/*2.js"],dest:"dist/built.js"};t=grunt.task.normalizeMultiTaskFiles(i,"ignored");n=[{dest:"dist/built.js",src:["src/file1.js","src/file2.js"],orig:i}];e.deepEqual(t,n,"should normalize target: {src: srcStuff, dest: destStuff}.");i={files:{"dist/built-a.js":"src/*1.js","dist/built-b.js":["src/*1.js",[["src/*2.js"]]]}};t=grunt.task.normalizeMultiTaskFiles(i,"ignored");n=[{dest:"dist/built-a.js",src:["src/file1.js"],orig:{dest:"dist/built-a.js",src:[i.files["dist/built-a.js"]]}},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],orig:{dest:"dist/built-b.js",src:s(i.files["dist/built-b.js"])}}];e.deepEqual(t,n,"should normalize target: {files: {destTarget: srcStuff, ...}}.");i={files:[{"dist/built-a.js":"src/*.whoops"},{"dist/built-b.js":[[["src/*1.js"],"src/*2.js"]]}]};t=grunt.task.normalizeMultiTaskFiles(i,"ignored");n=[{dest:"dist/built-a.js",src:[],orig:{dest:Object.keys(i.files[0])[0],src:[i.files[0]["dist/built-a.js"]]}},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],orig:{dest:Object.keys(i.files[1])[0],src:s(i.files[1]["dist/built-b.js"])}}];e.deepEqual(t,n,"should normalize target: {files: [{destTarget: srcStuff}, ...]}.");i={files:[{dest:"dist/built-a.js",src:["src/*2.js"]},{dest:"dist/built-b.js",src:["src/*1.js","src/*2.js"]}]};t=grunt.task.normalizeMultiTaskFiles(i,"ignored");n=[{dest:"dist/built-a.js",src:["src/file2.js"],orig:i.files[0]},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],orig:i.files[1]}];e.deepEqual(t,n,"should normalize target: {files: [{src: srcStuff, dest: destStuff}, ...]}.");i={files:[{dest:"dist/built-a.js",src:["src/*2.js"],foo:123,bar:!0},{dest:"dist/built-b.js",src:["src/*1.js","src/*2.js"],foo:456,bar:null}]};t=grunt.task.normalizeMultiTaskFiles(i,"ignored");n=[{dest:"dist/built-a.js",src:["src/file2.js"],foo:123,bar:!0,orig:i.files[0]},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],foo:456,bar:null,orig:i.files[1]}];e.deepEqual(t,n,"should propagate extra properties.");e.done()},nonull:function(e){e.expect(2);var t,n,r;r={src:["src/xxx*.js","src/yyy*.js"],dest:"dist/built.js"};t=grunt.task.normalizeMultiTaskFiles(r,"ignored");n=[{dest:r.dest,src:[],orig:r}];e.deepEqual(t,n,"if nonull is not set, should not include non-matching patterns.");r={src:["src/xxx*.js","src/yyy*.js"],dest:"dist/built.js",nonull:!0};t=grunt.task.normalizeMultiTaskFiles(r,"ignored");n=[{dest:r.dest,src:r.src,nonull:!0,orig:r}];e.deepEqual(t,n,"if nonull is set, should include non-matching patterns.");e.done()},expandMapping:function(e){e.expect(3);var t,n,r;r={files:[{dest:"dist/",src:["src/file?.js"],expand:!0},{dest:"dist/",src:["file?.js"],expand:!0,cwd:"src"}]};t=grunt.task.normalizeMultiTaskFiles(r,"ignored");n=[{dest:"dist/src/file1.js",src:["src/file1.js"],orig:r.files[0]},{dest:"dist/src/file2.js",src:["src/file2.js"],orig:r.files[0]},{dest:"dist/file1.js",src:["src/file1.js"],orig:r.files[1]},{dest:"dist/file2.js",src:["src/file2.js"],orig:r.files[1]}];e.deepEqual(t,n,"expand to file mapping, removing cwd from destination paths.");r={files:[{dest:"dist/",src:["src/file?.js"],expand:!0,flatten:!0}]};t=grunt.task.normalizeMultiTaskFiles(r,"ignored");n=[{dest:"dist/file1.js",src:["src/file1.js"],orig:r.files[0]},{dest:"dist/file2.js",src:["src/file2.js"],orig:r.files[0]}];e.deepEqual(t,n,"expand to file mapping, flattening destination paths.");r={files:[{dest:"dist/",src:["src/file?.js"],expand:!0,rename:function(e,t){return e+"min/"+t.replace(/(\.js)$/,".min$1")}}]};t=grunt.task.normalizeMultiTaskFiles(r,"ignored");n=[{dest:"dist/min/src/file1.min.js",src:["src/file1.js"],orig:r.files[0]},{dest:"dist/min/src/file2.min.js",src:["src/file2.js"],orig:r.files[0]}];e.deepEqual(t,n,"expand to file mapping, renaming files.");e.done()}};