"use strict";function cleanUp(){useFixtures.forEach(function(e){helper.cleanUp(e+"/node_modules")})}var grunt=require("grunt"),path=require("path"),fs=require("fs"),helper=require("./helper"),fixtures=helper.fixtures,useFixtures=["nospawn"];exports.nospawn={setUp:function(e){cleanUp();useFixtures.forEach(function(e){fs.symlinkSync(path.join(__dirname,"../../node_modules"),path.join(fixtures,e,"node_modules"))});e()},tearDown:function(e){cleanUp();e()},nospawn:function(e){e.expect(3);var t=path.resolve(fixtures,"nospawn"),n=helper.assertTask(["server","watch"],{cwd:t});n(function(){var e="var nospawn = true;";grunt.file.write(path.join(t,"lib","nospawn.js"),e)},function(t){helper.verboseLog(t);var n=t.match(new RegExp('Running "watch" task',"g")).length;e.equal(n,2,"Watch should have fired twice.");e.ok(t.indexOf("Server is listening...")!==-1,"server should have been started.");e.ok(t.indexOf("Server is talking!")!==-1,"server should have responded.");e.done()})},interrupt:function(e){e.expect(2);var t=path.resolve(fixtures,"nospawn"),n=helper.assertTask("watch",{cwd:t});n([function(){var e="var interrupt = true;";grunt.file.write(path.join(t,"lib","interrupt.js"),e);setTimeout(function(){grunt.file.write(path.join(t,"lib","interrupt.js"),e)},1e3)},function(){}],function(t){helper.verboseLog(t);var n=t.match(new RegExp('Running "long" task',"g")).length;e.equal(n,4,"long task should have been ran only 4 times.");e.ok(t.indexOf("have been interrupted")!==-1,"tasks should have been interrupted.");e.done()})}};