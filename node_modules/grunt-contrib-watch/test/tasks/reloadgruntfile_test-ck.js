"use strict";function cleanUp(){helper.cleanUp(["multiTargets/node_modules","multiTargets/Gruntfile.js.bak"])}var grunt=require("grunt"),path=require("path"),fs=require("fs"),helper=require("./helper"),fixtures=helper.fixtures,backupGrunfile;exports.reloadgruntfile={setUp:function(e){cleanUp();fs.symlinkSync(path.join(__dirname,"../../node_modules"),path.join(fixtures,"multiTargets","node_modules"));backupGrunfile=grunt.file.read(path.join(fixtures,"multiTargets","Gruntfile.js"));grunt.file.write(path.join(fixtures,"multiTargets","Gruntfile.js.bak"),backupGrunfile);e()},tearDown:function(e){grunt.file.write(path.join(fixtures,"multiTargets","Gruntfile.js"),backupGrunfile);cleanUp();e()},reloadgruntfile:function(e){e.expect(3);var t=path.resolve(fixtures,"multiTargets"),n=helper.assertTask("watch",{cwd:t});n([function(){grunt.file.write(path.join(t,"lib","one.js"),"var one = true;")},function(){var e=String(backupGrunfile).replace("echo:one","echo:two");grunt.file.write(path.join(t,"Gruntfile.js"),e)},function(){grunt.file.write(path.join(t,"lib","one.js"),"var one = true;")}],function(t){helper.verboseLog(t);var n=t.match(new RegExp('Running "watch" task',"g")).length;e.equal(n,2,"Watch should have fired twice.");e.ok(t.indexOf("one has changed")!==-1,"task one should have been triggered.");e.ok(t.indexOf("two has changed")!==-1,"task two should have been triggered.");e.done()})}};