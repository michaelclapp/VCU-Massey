function suite(e,t){return function(){before(function(){this.app=t;this.lr=new Server;this.app.use(connect.query()).use(connect.bodyParser()).use(this.lr.handler.bind(this.lr));this.server=http.createServer(this.app);debug("Start %s suite, listen on %d",e,port);this.server.listen(port)});after(function(e){this.server.close(e)});describe("GET /",function(){it("respond with nothing, but respond",function(e){request(this.server).get("/").expect("Content-Type",/json/).expect(/\{"tinylr":"Welcome","version":"0.0.[\d]+"\}/).expect(200,e)});it("unknown route are noop with middlewares, next-ing",function(e){request(this.server).get("/whatev").expect("Content-Type","text/plain").expect("Cannot GET /whatev").expect(404,e)})});describe("GET /changed",function(){it("with no clients, no files",function(e){request(this.server).get("/changed").expect("Content-Type",/json/).expect(/"clients":\[\]/).expect(/"files":\[\]/).expect(200,e)});it("with no clients, some files",function(e){request(this.server).get("/changed?files=gonna.css,test.css,it.css").expect("Content-Type",/json/).expect('{"clients":[],"files":["gonna.css","test.css","it.css"]}').expect(200,e)})});describe("POST /changed",function(){it("with no clients, no files",function(e){request(this.server).post("/changed").expect("Content-Type",/json/).expect(/"clients":\[\]/).expect(/"files":\[\]/).expect(200,e)});it.skip("with no clients, some files",function(e){var t={clients:[],files:["cat.css","sed.css","ack.js"]},n=request(this.server).post("/changed").send({files:t.files}).expect("Content-Type",/json/).expect(JSON.stringify(t)).expect(200,e)})});describe("GET /livereload.js",function(){it("respond with livereload script",function(e){request(this.server).get("/livereload.js").expect(/LiveReload/).expect(200,e)})});describe.skip("GET /kill",function(){it("shutdown the server",function(e){var t=this.server;request(t).get("/kill").expect(200,function(n){if(n)return e(n);assert.ok(!t._handle);e()})})})}}var http=require("http"),assert=require("assert"),connect=require("connect"),express=require("express"),request=require("supertest"),debug=require("debug")("tinylr:test"),Server=require("..").Server,npmenv=process.env,port=parseInt(process.env.npm_package_config_test_port||0,10);describe("Connect Middleware",suite("Connect Middleware",connect()));describe("Express Middleware",suite("Express Middleware",express()));