var expect=require("expect.js"),$=require("../"),food=require("./fixtures").food,fruits=require("./fixtures").fruits,text=require("./fixtures").text;describe("$(...)",function(){describe(".find",function(){it("() : should find nothing",function(){expect($("ul",fruits).find()).to.have.length(0)});it("(single) : should find one descendant",function(){expect($("#fruits",fruits).find(".apple")[0].attribs["class"]).to.equal("apple")});it("(many) : should find all matching descendant",function(){expect($("#fruits",fruits).find("li")).to.have.length(3)});it("(many) : should merge all selected elems with matching descendants",function(){expect($("#fruits, #food",food).find(".apple")).to.have.length(1)});it("(invalid single) : should return empty if cant find",function(){expect($("ul",fruits).find("blah")).to.have.length(0)});it("(invalid single) : should query descendants only",function(){expect($("#fruits",fruits).find("ul")).to.have.length(0)});it("should return empty if search already empty result",function(){expect($("#fruits").find("li")).to.have.length(0)});it("should throw a SyntaxError if given an invalid selector",function(){expect(function(){$("#fruits").find(":bah")}).to.throwException(function(e){expect(e).to.be.a(SyntaxError)})})});describe(".children",function(){it("() : should get all children",function(){expect($("ul",fruits).children()).to.have.length(3)});it("() : should return children of all matched elements",function(){expect($("ul ul",food).children()).to.have.length(5)});it("(selector) : should return children matching selector",function(){var e=$("ul",fruits).children(".orange")[0].attribs["class"];expect(e).to.equal("orange")});it("(invalid selector) : should return empty",function(){expect($("ul",fruits).children(".lulz")).to.have.length(0)});it("should only match immediate children, not ancestors")});describe(".contents",function(){it("() : should get all contents",function(){expect($("p",text).contents()).to.have.length(5)});it("() : should include text nodes",function(){expect($("p",text).contents().first()[0].type).to.equal("text")});it("() : should include comment nodes",function(){expect($("p",text).contents().last()[0].type).to.equal("comment")})});describe(".next",function(){it("() : should return next element",function(){var e=$(".orange",fruits).next()[0].attribs["class"];expect(e).to.equal("pear")});it("(no next) : should return empty for last child",function(){expect($(".pear",fruits).next()).to.have.length(0)});it("(next on empty object) : should return empty",function(){expect($(".banana",fruits).next()).to.have.length(0)})});describe(".nextAll",function(){it("() : should return all following siblings",function(){var e=$(".apple",fruits).nextAll();expect(e).to.have.length(2);expect(e[0].attribs["class"]).to.equal("orange");expect(e[1].attribs["class"]).to.equal("pear")});it("(no next) : should return empty for last child",function(){expect($(".pear",fruits).nextAll()).to.have.length(0)});it("(nextAll on empty object) : should return empty",function(){expect($(".banana",fruits).next()).to.have.length(0)})});describe(".prev",function(){it("() : should return previous element",function(){var e=$(".orange",fruits).prev()[0].attribs["class"];expect(e).to.equal("apple")});it("(no prev) : should return empty for first child",function(){expect($(".apple",fruits).prev()).to.have.length(0)});it("(prev on empty object) : should return empty",function(){expect($(".banana",fruits).next()).to.have.length(0)})});describe(".prevAll",function(){it("() : should return all preceding siblings",function(){var e=$(".pear",fruits).prevAll();expect(e).to.have.length(2);expect(e[0].attribs["class"]).to.equal("orange");expect(e[1].attribs["class"]).to.equal("apple")});it("(no prev) : should return empty for first child",function(){expect($(".apple",fruits).prevAll()).to.have.length(0)});it("(prevAll on empty object) : should return empty",function(){expect($(".banana",fruits).next()).to.have.length(0)})});describe(".siblings",function(){it("() : should get all the siblings",function(){expect($(".orange",fruits).siblings()).to.have.length(2);expect($("#fruits",fruits).siblings()).to.have.length(0);expect($(".apple, .carrot",food).siblings()).to.have.length(3)});it("(selector) : should get all siblings that match the selector",function(){expect($(".orange",fruits).siblings(".apple")).to.have.length(1);expect($(".orange",fruits).siblings(".peach")).to.have.length(0)});it("(selector) : should throw a SyntaxError if given an invalid selector",function(){expect(function(){$(".orange",fruits).siblings(":bah")}).to.throwException(function(e){expect(e).to.be.a(SyntaxError)})})});describe(".parents",function(){it("() : should get all of the parents in logical order",function(){var e=$(".orange",food).parents();expect(e).to.have.length(2);expect(e[0].attribs.id).to.be("fruits");expect(e[1].attribs.id).to.be("food");e=$("#fruits",food).parents();expect(e).to.have.length(1);expect(e[0].attribs.id).to.be("food")});it("(selector) : should get all of the parents that match the selector in logical order",function(){var e=$(".orange",food).parents("#fruits");expect(e).to.have.length(1);expect(e[0].attribs.id).to.be("fruits");e=$(".orange",food).parents("ul");expect(e).to.have.length(2);expect(e[0].attribs.id).to.be("fruits");expect(e[1].attribs.id).to.be("food")});it("() : should not break if the selector does not have any results",function(){var e=$(".saladbar",food).parents();expect(e).to.have.length(0)});it("() : should return an empty set for top-level elements",function(){var e=$("#food",food).parents();expect(e).to.have.length(0)})});describe(".parent",function(){it("() : should return the parent of each matched element",function(){var e=$(".orange",fruits).parent();expect(e).to.have.length(1);expect(e[0].attribs.id).to.be("fruits");e=$("li",food).parent();expect(e).to.have.length(2);expect(e[0].attribs.id).to.be("fruits");expect(e[1].attribs.id).to.be("vegetables")});it("() : should return an empty object for top-level elements",function(){var e=$("ul",fruits).parent();expect(e).to.have.length(0)});it("() : should not contain duplicate elements",function(){var e=$("li",fruits).parent();expect(e).to.have.length(1)});it("(selector) : should filter the matched parent elements by the selector",function(){var e=$(".orange",fruits).parent();expect(e).to.have.length(1);expect(e[0].attribs.id).to.be("fruits");e=$("li",food).parent("#fruits");expect(e).to.have.length(1);expect(e[0].attribs.id).to.be("fruits")})});describe(".closest",function(){it("() : should return an empty array",function(){var e=$(".orange",fruits).closest();expect(e).to.have.length(0);expect(e).to.be.a($)});it("(selector) : should find the closest element that matches the selector, searching through its ancestors and itself",function(){expect($(".orange",fruits).closest(".apple")).to.have.length(0);var e=$(".orange",food).closest("#food");expect(e[0].attribs.id).to.be("food");e=$(".orange",food).closest("ul");expect(e[0].attribs.id).to.be("fruits");e=$(".orange",food).closest("li");expect(e[0].attribs["class"]).to.be("orange")});it("(selector) : should find the closest element of each item, removing duplicates",function(){var e=$("li",food).closest("ul");expect(e).to.have.length(2)});it("() : should not break if the selector does not have any results",function(){var e=$(".saladbar",food).closest("ul");expect(e).to.have.length(0)})});describe(".each",function(){it("( (i, elem) -> ) : should loop selected returning fn with (i, elem)",function(){var e=[],t=["apple","orange","pear"];$("li",fruits).each(function(n,r){e[n]=r;expect(this[0].attribs["class"]).to.equal(t[n])});expect(e[0].attribs["class"]).to.equal("apple");expect(e[1].attribs["class"]).to.equal("orange");expect(e[2].attribs["class"]).to.equal("pear")});it("( (i, elem) -> ) : should break iteration when the iterator function returns false",function(){var e=0;$("li",fruits).each(function(t,n){e++;return t<1});expect(e).to.equal(2)})});describe(".map",function(){it("(fn) : should return an array of mapped items",function(){var e=$("li",fruits).map(function(e,t){expect(this[0]).to.be(t);expect(t.name).to.be("li");expect(e).to.be.a("number");return t.attribs["class"]}).join(", ");expect(e).to.be("apple, orange, pear")})});describe(".filter",function(){it("(selector) : should reduce the set of matched elements to those that match the selector",function(){var e=$("li",fruits).filter(".pear").text();expect(e).to.be("Pear")});it("(selector) : should not consider nested elements",function(){var e=$(fruits).filter("li");expect(e).to.have.length(0)});it("(selection) : should reduce the set of matched elements to those that are contained in the provided selection",function(){var e=$("li",fruits),t=e.filter(".pear, .apple");expect(e.filter(t)).to.have.length(2)});it("(element) : should reduce the set of matched elements to those that specified directly",function(){var e=$("li",fruits),t=e.filter(".pear")[0];expect(e.filter(t)).to.have.length(1)});it("(fn) : should reduce the set of matched elements to those that pass the function's test",function(){var e=$("li",fruits).filter(function(e,t){expect(this[0]).to.be(t);expect(t.name).to.be("li");expect(e).to.be.a("number");return this.attr("class")==="orange"}).text();expect(e).to.be("Orange")})});describe(".first",function(){it("() : should return the first item",function(){var e=$("<span>foo</span><span>bar</span><span>baz</span>"),t=e.first();expect(t.length).to.equal(1);expect(t[0].children[0].data).to.equal("foo")});it("() : should return an empty object for an empty object",function(){var e=$(),t=e.first();expect(t.length).to.equal(0);expect(t[0]).to.be(undefined)})});describe(".last",function(){it("() : should return the last element",function(){var e=$("<span>foo</span><span>bar</span><span>baz</span>"),t=e.last();expect(t.length).to.equal(1);expect(t[0].children[0].data).to.equal("baz")});it("() : should return an empty object for an empty object",function(){var e=$(),t=e.last();expect(t.length).to.equal(0);expect(t[0]).to.be(undefined)})});describe(".first & .last",function(){it("() : should return equivalent collections if only one element",function(){var e=$("<span>bar</span>"),t=e.first(),n=e.last();expect(t.length).to.equal(1);expect(t[0].children[0].data).to.equal("bar");expect(n.length).to.equal(1);expect(n[0].children[0].data).to.equal("bar");expect(t[0]).to.equal(n[0])})});describe(".eq",function(){function e(e){return e.length?e[0].children[0].data:""}it("(i) : should return the element at the specified index",function(){expect(e($("li",fruits).eq(0))).to.equal("Apple");expect(e($("li",fruits).eq(1))).to.equal("Orange");expect(e($("li",fruits).eq(2))).to.equal("Pear");expect(e($("li",fruits).eq(3))).to.equal("");expect(e($("li",fruits).eq(-1))).to.equal("Pear")})});describe(".slice",function(){function e(e){return e.length?e[0].children[0].data:""}it("(start) : should return all elements after the given index",function(){var t=$("li",fruits).slice(1);expect(t).to.have.length(2);expect(e(t.eq(0))).to.equal("Orange");expect(e(t.eq(1))).to.equal("Pear")});it("(start, end) : should return all elements matching the given range",function(){var t=$("li",fruits).slice(1,2);expect(t).to.have.length(1);expect(e(t.eq(0))).to.equal("Orange")});it("(-start) : should return element matching the offset from the end",function(){var t=$("li",fruits).slice(-1);expect(t).to.have.length(1);expect(e(t.eq(0))).to.equal("Pear")})})});