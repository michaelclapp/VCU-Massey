var expect=require("expect.js"),fixtures=require("./fixtures"),$=require("../");describe("$",function(){describe(".html",function(){it("() : should return innerHTML; $.html(obj) should return outerHTML",function(){var e=$("div","<div><span>foo</span><span>bar</span></div>"),t=e.children()[1];expect($(t).html()).to.equal("bar");expect($.html(t)).to.equal("<span>bar</span>")});it("(<obj>) : should accept an object, an array, or a cheerio object",function(){var e=$("<span>foo</span>");expect($.html(e[0])).to.equal("<span>foo</span>");expect($.html(e)).to.equal("<span>foo</span>")});it("(<value>) : should be able to set to an empty string",function(){var e=$("<span>foo</span>").html("");expect($.html(e)).to.equal("<span></span>")});it("() : of empty cheerio object should return null",function(){expect($().html()).to.be(null)});it("(selector) : should return the outerHTML of the selected element",function(){var e=$.load(fixtures.fruits);expect(e.html(".pear")).to.equal('<li class="pear">Pear</li>')})});describe(".load",function(){it("(html) : should retain original root after creating a new node",function(){var e=$.load('<body><ul id="fruits"></ul></body>');expect(e("body")).to.have.length(1);e("<script>");expect(e("body")).to.have.length(1)});it("(html) : should handle lowercase tag options",function(){var e=$.load('<BODY><ul id="fruits"></ul></BODY>',{lowerCaseTags:!0});expect(e.html()).to.be('<body><ul id="fruits"></ul></body>')});it("(html) : should handle the ignore whitepace option",function(){var e=$.load('<body><a href="http://yahoo.com">Yahoo</a> <a href="http://google.com">Google</a></body>',{ignoreWhitespace:!0});expect(e.html()).to.be('<body><a href="http://yahoo.com">Yahoo</a><a href="http://google.com">Google</a></body>')})});describe(".clone",function(){it("() : should return a copy",function(){var e=$("<div><span>foo</span><span>bar</span><span>baz</span></div>").children(),t=e.clone();expect(t.length).to.equal(3);expect(t.parent()).to.have.length(0);expect(t.text()).to.equal(e.text());e.text("rofl");expect(t.text()).to.not.equal(e.text())})});describe(".parseHTML",function(){it("() : returns null",function(){expect($.parseHTML()).to.equal(null)});it("(null) : returns null",function(){expect($.parseHTML(null)).to.equal(null)});it('("") : returns null',function(){expect($.parseHTML("")).to.equal(null)});it("(largeHtmlString) : parses large HTML strings",function(){var e=(new Array(10)).join("<div></div>"),t=$.parseHTML(e);expect(t.length).to.be.greaterThan(4);expect(t).to.be.an("array")});it('("<script>") : ignores scripts by default',function(){var e="<script>undefined()</script>";expect($.parseHTML(e)).to.have.length(0)});it('("<script>", true) : preserves scripts when requested',function(){var e="<script>undefined()</script>";expect($.parseHTML(e,!0)[0].name).to.match(/script/i)});it('("scriptAndNonScript) : preserves non-script nodes',function(){var e="<script>undefined()</script><div></div>";expect($.parseHTML(e)[0].name).to.match(/div/i)});it("(scriptAndNonScript, true) : Preserves script position",function(){var e="<script>undefined()</script><div></div>";expect($.parseHTML(e,!0)[0].name).to.match(/script/i)});it("(text) : returns a text node",function(){expect($.parseHTML("text")[0].type).to.be("text")});it("(\\ttext) : preserves leading whitespace",function(){expect($.parseHTML("	<div></div>")[0].data).to.equal("	")});it("( text) : Leading spaces are treated as text nodes",function(){expect($.parseHTML(" <div/> ")[0].type).to.be("text")});it("(html) : should preserve content",function(){var e="<div>test div</div>";expect($($.parseHTML(e)[0]).html()).to.equal("test div")});it("(malformedHtml) : should not break",function(){expect($.parseHTML("<span><span>")).to.have.length(1)});it("(garbageInput) : should not cause an error",function(){expect($.parseHTML("<#if><tr><p>This is a test.</p></tr><#/if>")||!0).to.be.ok()})});describe(".root",function(){it("() : should return a cheerio-wrapped root object",function(){var e=$.load("<div><span>foo</span><span>bar</span></div>");e.root().append('<div id="test"></div>');expect(e.html()).to.equal('<div><span>foo</span><span>bar</span></div><div id="test"></div>')})})});