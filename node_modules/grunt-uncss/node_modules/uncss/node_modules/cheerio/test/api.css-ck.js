var expect=require("expect.js"),$=require("..");describe("$(...)",function(){describe(".css",function(){it("(prop): should return a css property value",function(){var e=$('<li style="hai: there">');expect(e.css("hai")).to.equal("there")});it("([prop1, prop2]): should return the specified property values as an object",function(){var e=$('<li style="margin: 1px; padding: 2px; color: blue;">');expect(e.css(["margin","color"])).to.eql({margin:"1px",color:"blue"})});it("(prop, val): should set a css property",function(){var e=$('<li style="margin: 0;"></li><li></li>');e.css("color","red");expect(e.attr("style")).to.equal("margin: 0; color: red;");expect(e.eq(1).attr("style")).to.equal("color: red;")});it('(prop, ""): should unset a css property',function(){var e=$('<li style="padding: 1px; margin: 0;">');e.css("padding","");expect(e.attr("style")).to.equal("margin: 0;")});describe("(prop, function):",function(){beforeEach(function(){this.$el=$('<div style="margin: 0;"></div><div style="margin: 0;"></div><div style="margin: 0;">')});it("should iterate over the selection",function(){var e=0,t=this.$el;this.$el.css("margin",function(n,r){expect(n).to.equal(e);expect(r).to.equal(t[e]);expect(this).to.equal(t[e]);e++});expect(e).to.equal(3)});it("should set each attribute independently",function(){var e=["4px","",undefined];this.$el.css("margin",function(t){return e[t]});expect(this.$el.eq(0).attr("style")).to.equal("margin: 4px;");expect(this.$el.eq(1).attr("style")).to.equal("");expect(this.$el.eq(2).attr("style")).to.equal("margin: 0;")})});it("(obj): should set each key and val",function(){var e=$('<li style="padding: 0;"></li><li></li>');e.css({foo:0});expect(e.eq(0).attr("style")).to.equal("padding: 0; foo: 0;");expect(e.eq(1).attr("style")).to.equal("foo: 0;")});describe("parser",function(){it("should allow any whitespace between declarations",function(){var e=$('<li style="one 	:\n 0;\n two \f\r: 1">');expect(e.css(["one","two"])).to.eql({one:0,two:1})})})})});