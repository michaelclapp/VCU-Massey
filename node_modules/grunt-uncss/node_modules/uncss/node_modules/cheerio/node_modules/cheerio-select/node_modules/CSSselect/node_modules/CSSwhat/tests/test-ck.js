var deepEquals=require("assert").deepEqual,CSSwhat=require("../"),tests=[["div",[[{type:"tag",name:"div"}]],"simple tag"],["*",[[{type:"universal"}]],"universal"],["div div",[[{type:"tag",name:"div"},{type:"descendant"},{type:"tag",name:"div"}]],"descendant"],["div	 \n 	div",[[{type:"tag",name:"div"},{type:"descendant"},{type:"tag",name:"div"}]],"descendant /w whitespace"],["div + div",[[{type:"tag",name:"div"},{type:"adjacent"},{type:"tag",name:"div"}]],"adjacent"],["div ~ div",[[{type:"tag",name:"div"},{type:"sibling"},{type:"tag",name:"div"}]],"sibling"],["#\\  > a ",[[{type:"attribute",action:"equals",name:"id",value:" ",ignoreCase:!1},{type:"child"},{type:"tag",name:"a"}]],"Space between escaped space and combinator"],[".\\  ",[[{type:"attribute",name:"class",action:"element",value:" ",ignoreCase:!1}]],"Space after escaped space"],["\\61 ",[[{type:"tag",name:"a"}]],"Numeric escape with space (BMP)"],["\\1d306\\01d306",[[{type:"tag",name:"ùåÜùåÜ"}]],"Numeric escape (outside BMP)"],["[name^='foo[']",[[{type:"attribute",name:"name",action:"start",value:"foo[",ignoreCase:!1}]],"quoted attribute"],["[name^='foo[bar]']",[[{type:"attribute",name:"name",action:"start",value:"foo[bar]",ignoreCase:!1}]],"quoted attribute"],["[name$='[bar]']",[[{type:"attribute",name:"name",action:"end",value:"[bar]",ignoreCase:!1}]],"quoted attribute"],["[href *= 'google']",[[{type:"attribute",name:"href",action:"any",value:"google",ignoreCase:!1}]],"quoted attribute with spaces"],["[name=foo\\.baz]",[[{type:"attribute",name:"name",action:"equals",value:"foo.baz",ignoreCase:!1}]],"attribute with escaped dot"],["[name=foo\\[bar\\]]",[[{type:"attribute",name:"name",action:"equals",value:"foo[bar]",ignoreCase:!1}]],"attribute with escaped square brackets"],["[xml\\:test]",[[{type:"attribute",name:"xml:test",action:"exists",value:"",ignoreCase:!1}]],"escaped attribute"],[":foo",[[{type:"pseudo",name:"foo",data:null}]],"pseudo selector without any data"],[":bar(baz)",[[{type:"pseudo",name:"bar",data:"baz"}]],"pseudo selector with data"],[":contains('(foo)')",[[{type:"pseudo",name:"contains",data:"'(foo)'"}]],"pseudo selector with data"],["a , b",[[{type:"tag",name:"a"}],[{type:"tag",name:"b"}]],"multiple selectors"]];tests.forEach(function(e,t){e[0]=CSSwhat(e[0]);deepEquals.apply(null,e);console.log("	%d: '%s' passed",t+1,e[2])});