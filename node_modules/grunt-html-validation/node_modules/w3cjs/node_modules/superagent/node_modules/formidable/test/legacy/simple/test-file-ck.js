function test(e){gently=new Gently;file=new File;e();gently.verify(e.name)}var common=require("../common"),WriteStreamStub=GENTLY.stub("fs","WriteStream"),File=require(common.lib+"/file"),EventEmitter=require("events").EventEmitter,file,gently;test(function e(){assert.ok(file instanceof EventEmitter);assert.strictEqual(file.size,0);assert.strictEqual(file.path,null);assert.strictEqual(file.name,null);assert.strictEqual(file.type,null);assert.strictEqual(file.lastModifiedDate,null);assert.strictEqual(file._writeStream,null);(function(){var t=new File({foo:"bar"});assert.equal(t.foo,"bar")})()});test(function(){var t;file.path="/foo";gently.expect(WriteStreamStub,"new",function(e){t=this;assert.strictEqual(e,file.path)});file.open();assert.strictEqual(file._writeStream,t)});test(function(){var t={length:10},n,r=function(){n.apply(this,arguments)};file._writeStream={};gently.expect(file._writeStream,"write",function(e,r){assert.strictEqual(e,t);gently.expect(file,"emit",function(e,t){assert.ok(file.lastModifiedDate instanceof Date);assert.equal(e,"progress");assert.equal(t,file.size)});n=gently.expect(function(){assert.equal(file.size,10)});r();gently.expect(file,"emit",function(e,t){assert.equal(e,"progress");assert.equal(t,file.size)});n=gently.expect(function(){assert.equal(file.size,20)});r()});file.write(t,r)});test(function(){var t,n=function(){t.apply(this,arguments)};file._writeStream={};gently.expect(file._writeStream,"end",function(e){gently.expect(file,"emit",function(e){assert.equal(e,"end")});t=gently.expect(function(){});e()});file.end(n)});