function createMultipartBuffer(e,t){var n="--"+e+"\r\n"+'content-disposition: form-data; name="field1"\r\n'+"\r\n",r="\r\n--"+e+"--\r\n",i=new Buffer(t);i.write(n,"ascii",0);i.write(r,"ascii",i.length-r.length);return i}var assert=require("assert");require("../test/common");var multipartParser=require("../lib/multipart_parser"),MultipartParser=multipartParser.MultipartParser,parser=new MultipartParser,Buffer=require("buffer").Buffer,boundary="-----------------------------168072824752491622650073",mb=100,buffer=createMultipartBuffer(boundary,mb*1024*1024),callbacks={partBegin:-1,partEnd:-1,headerField:-1,headerValue:-1,partData:-1,end:-1};parser.initWithBoundary(boundary);parser.onHeaderField=function(){callbacks.headerField++};parser.onHeaderValue=function(){callbacks.headerValue++};parser.onPartBegin=function(){callbacks.partBegin++};parser.onPartData=function(){callbacks.partData++};parser.onPartEnd=function(){callbacks.partEnd++};parser.onEnd=function(){callbacks.end++};var start=+(new Date),nparsed=parser.write(buffer),duration=+(new Date)-start,mbPerSec=(mb/(duration/1e3)).toFixed(2);console.log(mbPerSec+" mb/sec");assert.equal(nparsed,buffer.length);process.on("exit",function(){for(var e in callbacks)assert.equal(0,callbacks[e],e+" count off by "+callbacks[e])});