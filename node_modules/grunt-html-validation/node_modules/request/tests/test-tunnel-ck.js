// test that we can tunnel a https request over an http proxy
// keeping all the CA and whatnot intact.
//
// Note: this requires that squid is installed.
// If the proxy fails to start, we'll just log a warning and assume success.
function notInstalled(){console.error("squid must be installed to run this test.");console.error("skipping this test. please install squid and run again if you need to test tunneling.");c=null;hadError=null;process.exit(0)}var server=require("./server"),assert=require("assert"),request=require("../index"),fs=require("fs"),path=require("path"),caFile=path.resolve(__dirname,"ssl/npm-ca.crt"),ca=fs.readFileSync(caFile),child_process=require("child_process"),sqConf=path.resolve(__dirname,"squid.conf"),sqArgs=["-f",sqConf,"-N","-d","5"],proxy="http://localhost:3128",hadError=null,squid=child_process.spawn("squid",sqArgs),ready=!1;squid.stderr.on("data",function(e){console.error("SQUIDERR "+e.toString().trim().split("\n").join("\nSQUIDERR "));ready=e.toString().match(/ready to serve requests|Accepting HTTP Socket connections/i)});squid.stdout.on("data",function(e){console.error("SQUIDOUT "+e.toString().trim().split("\n").join("\nSQUIDOUT "))});squid.on("error",function(e){console.error("squid: error "+e);if(e&&!ready){notInstalled();return}});squid.on("exit",function(e){console.error("squid: exit "+e);if(e&&!ready){notInstalled();return}e&&(hadError=hadError||new Error("Squid exited with "+e));if(hadError)throw hadError});setTimeout(function e(){if(!ready)return setTimeout(e,100);request({uri:"https://registry.npmjs.org/",proxy:"http://localhost:3128",strictSSL:!0,ca:ca,json:!0},function(e,t){hadError=e;console.log(e||typeof t);e||console.log("ok");squid.kill("SIGKILL")})},100);