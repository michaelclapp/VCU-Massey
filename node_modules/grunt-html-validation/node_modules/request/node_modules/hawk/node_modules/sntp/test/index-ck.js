// Load modules
var Dgram=require("dgram"),Lab=require("lab"),Sntp=require("../lib"),internals={},expect=Lab.expect,before=Lab.before,after=Lab.after,describe=Lab.experiment,it=Lab.test;describe("SNTP",function(){describe("#time",function(){it("returns consistent result over multiple tries",function(e){Sntp.time(function(t,n){expect(t).to.not.exist;expect(n).to.exist;var r=n.t;Sntp.time(function(t,n){expect(t).to.not.exist;expect(n).to.exist;var i=n.t;expect(Math.abs(r-i)).is.below(200);e()})})});it("resolves reference IP",function(e){Sntp.time({host:"ntp.exnet.com",resolveReference:!0},function(t,n){expect(t).to.not.exist;expect(n).to.exist;expect(n.referenceHost).to.exist;e()})});it("times out on no response",function(e){Sntp.time({port:124,timeout:100},function(t,n){expect(t).to.exist;expect(n).to.not.exist;expect(t.message).to.equal("Timeout");e()})});it("errors on error event",function(e){var t=Dgram.createSocket;Dgram.createSocket=function(e){Dgram.createSocket=t;var n=Dgram.createSocket(e);process.nextTick(function(){n.emit("error",new Error("Fake"))});return n};Sntp.time(function(t,n){expect(t).to.exist;expect(n).to.not.exist;expect(t.message).to.equal("Fake");e()})});it("times out on invalid host",function(e){Sntp.time({host:"error",timeout:1e4},function(t,n){expect(t).to.exist;expect(n).to.not.exist;expect(t.message).to.equal("getaddrinfo ENOTFOUND");e()})});it("fails on bad response buffer size",function(e){var t=Dgram.createSocket("udp4");t.on("message",function(e,n){var e=new Buffer(10);t.send(e,0,e.length,n.port,n.address,function(e,n){t.close()})});t.bind(49123);Sntp.time({host:"localhost",port:49123},function(t,n){expect(t).to.exist;expect(t.message).to.equal("Invalid server response");e()})});var e=function(e){var t=Dgram.createSocket("udp4");t.on("message",function(n,r){var n=new Buffer([36,1,0,227,0,0,0,0,0,0,0,0,65,67,84,83,212,168,45,199,28,93,73,27,212,168,45,230,103,239,157,178,212,168,45,230,113,237,181,251,212,168,45,230,113,238,108,197]);for(var i=0,s=e.length;i<s;++i)n[e[i][0]]=e[i][1];t.send(n,0,n.length,r.port,r.address,function(e,n){t.close()})});t.bind(49123)};it("fails on bad version",function(t){e([[0,28]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(n.version).to.equal(3);expect(e.message).to.equal("Invalid server response");t()})});it("fails on bad originate timestamp and alarm li",function(t){e([[0,228]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(e.message).to.equal("Wrong originate timestamp");expect(n.leapIndicator).to.equal("alarm");t()})});it("returns time with death stratum and last61 li",function(t){e([[0,100],[1,0]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(n.stratum).to.equal("death");expect(n.leapIndicator).to.equal("last-minute-61");t()})});it("returns time with reserved stratum and last59 li",function(t){e([[0,164],[1,31]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(n.stratum).to.equal("reserved");expect(n.leapIndicator).to.equal("last-minute-59");t()})});it("fails on bad mode (symmetric-active)",function(t){e([[0,33]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(n.mode).to.equal("symmetric-active");t()})});it("fails on bad mode (symmetric-passive)",function(t){e([[0,34]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(n.mode).to.equal("symmetric-passive");t()})});it("fails on bad mode (client)",function(t){e([[0,35]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(n.mode).to.equal("client");t()})});it("fails on bad mode (broadcast)",function(t){e([[0,37]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(n.mode).to.equal("broadcast");t()})});it("fails on bad mode (reserved)",function(t){e([[0,38]]);Sntp.time({host:"localhost",port:49123},function(e,n){expect(e).to.exist;expect(n.mode).to.equal("reserved");t()})})});describe("#offset",function(){it("gets the current offset",function(e){Sntp.offset(function(t,n){expect(t).to.not.exist;expect(n).to.not.equal(0);e()})});it("gets the current offset from cache",function(e){Sntp.offset(function(t,n){expect(t).to.not.exist;expect(n).to.not.equal(0);var r=n;Sntp.offset({},function(t,n){expect(t).to.not.exist;expect(n).to.equal(r);e()})})});it("fails getting the current offset on invalid server",function(e){Sntp.offset({host:"error"},function(t,n){expect(t).to.exist;expect(n).to.equal(0);e()})})});describe("#now",function(){it("starts auto-sync, gets now, then stops",function(e){Sntp.stop();var t=Sntp.now();expect(t).to.equal(Date.now());Sntp.start(function(){var t=Sntp.now();expect(t).to.not.equal(Date.now());Sntp.stop();e()})});it("starts twice",function(e){Sntp.start(function(){Sntp.start(function(){var t=Sntp.now();expect(t).to.not.equal(Date.now());Sntp.stop();e()})})});it("starts auto-sync, gets now, waits, gets again after timeout",function(e){Sntp.stop();var t=Sntp.now();expect(t).to.equal(Date.now());Sntp.start({clockSyncRefresh:100},function(){var t=Sntp.now();expect(t).to.not.equal(Date.now());expect(t).to.equal(Sntp.now());setTimeout(function(){expect(Sntp.now()).to.not.equal(t);Sntp.stop();e()},110)})})})});