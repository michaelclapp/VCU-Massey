/*
 * Test the different forms of reading characters:
 *
 *  - the default, a single element buffer
 *  - uint8, values are uint8_ts
 *  - int8, values are int8_ts
 */function test(){var e,t,n;t=new Buffer(1);t[0]=255;e=new mod_ctype.Parser({endian:"little"});n=e.readData([{c:{type:"char"}}],t,0);n=n.c;mod_assert.ok(n instanceof Buffer);mod_assert.equal(255,n[0]);e=new mod_ctype.Parser({endian:"little","char-type":"int8"});n=e.readData([{c:{type:"char"}}],t,0);n=n.c;mod_assert.ok(typeof n=="number","got typeof (res): "+typeof n);mod_assert.equal(-1,n);e=new mod_ctype.Parser({endian:"little","char-type":"uint8"});n=e.readData([{c:{type:"char"}}],t,0);n=n.c;mod_assert.ok(typeof n=="number","got typeof (res): "+typeof n);mod_assert.equal(255,n)}var mod_ctype=require("../../ctype"),mod_assert=require("assert");test();