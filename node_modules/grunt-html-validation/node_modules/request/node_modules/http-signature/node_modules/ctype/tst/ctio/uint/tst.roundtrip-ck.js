/*
 * A battery of tests for sucessful round-trip between writes and reads
 */function test8(){var e=new Buffer(1),t;for(t=0;t<256;t++){mod_ctype.wuint8(t,"big",e,0);ASSERT.equal(t,mod_ctype.ruint8(e,"big",0));mod_ctype.wuint8(t,"little",e,0);ASSERT.equal(t,mod_ctype.ruint8(e,"little",0))}ASSERT.ok(!0)}function test16(){var e=new Buffer(2),t=0;for(t=0;t<256;t++){var n=Math.round(Math.random()*Math.pow(2,16));mod_ctype.wuint16(n,"big",e,0);ASSERT.equal(n,mod_ctype.ruint16(e,"big",0));mod_ctype.wuint16(n,"little",e,0);ASSERT.equal(n,mod_ctype.ruint16(e,"little",0))}}function test32(){var e=new Buffer(4),t=0;for(t=0;t<256;t++){var n=Math.round(Math.random()*Math.pow(2,32));mod_ctype.wuint32(n,"big",e,0);ASSERT.equal(n,mod_ctype.ruint32(e,"big",0));mod_ctype.wuint32(n,"little",e,0);ASSERT.equal(n,mod_ctype.ruint32(e,"little",0))}}function test64(){var e=new Buffer(8),t=0;for(t=0;t<256;t++){var n=Math.round(Math.random()*Math.pow(2,32)),r=Math.round(Math.random()*Math.pow(2,32));mod_ctype.wuint64([r,n],"big",e,0);var i=mod_ctype.ruint64(e,"big",0);ASSERT.equal(r,i[0]);ASSERT.equal(n,i[1]);mod_ctype.wuint64([r,n],"little",e,0);i=mod_ctype.ruint64(e,"little",0);ASSERT.equal(r,i[0]);ASSERT.equal(n,i[1])}}var mod_ctype=require("../../../ctio.js"),ASSERT=require("assert");exports.test8=test8;exports.test16=test16;exports.test32=test32;exports.test64=test64;