// Copyright 2012 Joyent, Inc.  All rights reserved.
function MissingHeaderError(e){this.name="MissingHeaderError";this.message=e;this.stack=(new Error).stack}function InvalidAlgorithmError(e){this.name="InvalidAlgorithmError";this.message=e;this.stack=(new Error).stack}function _pad(e){parseInt(e,10)<10&&(e="0"+e);return e}function _rfc1123(){var e=new Date,t=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],n=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];return n[e.getUTCDay()]+", "+_pad(e.getUTCDate())+" "+t[e.getUTCMonth()]+" "+e.getUTCFullYear()+" "+_pad(e.getUTCHours())+":"+_pad(e.getUTCMinutes())+":"+_pad(e.getUTCSeconds())+" GMT"}var assert=require("assert-plus"),crypto=require("crypto"),http=require("http"),sprintf=require("util").format,Algorithms={"rsa-sha1":!0,"rsa-sha256":!0,"rsa-sha512":!0,"dsa-sha1":!0,"hmac-sha1":!0,"hmac-sha256":!0,"hmac-sha512":!0},Authorization='Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';MissingHeaderError.prototype=new Error;InvalidAlgorithmError.prototype=new Error;module.exports={signRequest:function(t,n){assert.object(t,"request");assert.object(n,"options");assert.optionalString(n.algorithm,"options.algorithm");assert.string(n.keyId,"options.keyId");assert.optionalArrayOfString(n.headers,"options.headers");assert.optionalString(n.httpVersion,"options.httpVersion");t.getHeader("Date")||t.setHeader("Date",_rfc1123());n.headers||(n.headers=["date"]);n.algorithm||(n.algorithm="rsa-sha256");n.httpVersion||(n.httpVersion="1.1");n.algorithm=n.algorithm.toLowerCase();if(!Algorithms[n.algorithm])throw new InvalidAlgorithmError(n.algorithm+" is not supported");var r,i="";for(r=0;r<n.headers.length;r++){if(typeof n.headers[r]!="string")throw new TypeError("options.headers must be an array of Strings");var s=n.headers[r].toLowerCase();if(s!=="request-line"){var o=t.getHeader(s);if(!o)throw new MissingHeaderError(s+" was not in the request");i+=s+": "+o}else o=i+=t.method+" "+t.path+" HTTP/"+n.httpVersion;r+1<n.headers.length&&(i+="\n")}var u=n.algorithm.match(/(hmac|rsa)-(\w+)/),a;if(u[1]==="hmac"){var f=crypto.createHmac(u[2].toUpperCase(),n.key);f.update(i);a=f.digest("base64")}else{var l=crypto.createSign(n.algorithm.toUpperCase());l.update(i);a=l.sign(n.key,"base64")}t.setHeader("Authorization",sprintf(Authorization,n.keyId,n.algorithm,n.headers.join(" "),a));return!0}};