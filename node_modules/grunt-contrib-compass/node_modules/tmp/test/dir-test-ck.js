function _testDir(e){return function(n,r){assert.ok(existsSync(r),"should exist");var i=fs.statSync(r);assert.ok(i.isDirectory(),"should be a directory");Test.testStat(i,e)}}var vows=require("vows"),assert=require("assert"),path=require("path"),fs=require("fs"),existsSync=fs.existsSync||path.existsSync,tmp=require("../lib/tmp.js"),Test=require("./base.js");vows.describe("Directory creation").addBatch({"when using without parameters":{topic:function(){tmp.dir(this.callback)},"should be a directory":_testDir(16832),"should have the default prefix":Test.testPrefix("tmp-")},"when using with prefix":{topic:function(){tmp.dir({prefix:"something"},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a directory":_testDir(16832),"should have the provided prefix":Test.testPrefix("something")},"when using with postfix":{topic:function(){tmp.dir({postfix:".txt"},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a directory":_testDir(16832),"should have the provided postfix":Test.testPostfix(".txt")},"when using template":{topic:function(){tmp.dir({template:path.join(tmp.tmpdir,"clike-XXXXXX-postfix")},this.callback)},"should not return with error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testDir(16832),"should have the provided prefix":Test.testPrefix("clike-"),"should have the provided postfix":Test.testPostfix("-postfix")},"when using multiple options":{topic:function(){tmp.dir({prefix:"foo",postfix:"bar",mode:488},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a directory":_testDir(16872),"should have the provided prefix":Test.testPrefix("foo"),"should have the provided postfix":Test.testPostfix("bar")},"when using multiple options and mode":{topic:function(){tmp.dir({prefix:"complicated",postfix:"options",mode:493},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a directory":_testDir(16877),"should have the provided prefix":Test.testPrefix("complicated"),"should have the provided postfix":Test.testPostfix("options")},"no tries":{topic:function(){tmp.dir({tries:-1},this.callback)},"should return with an error":assert.isObject},"keep testing":{topic:function(){Test.testKeep("dir","1",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a dir":function(e,t){_testDir(16832)(e,t);fs.rmdirSync(t)}},"unlink testing":{topic:function(){Test.testKeep("dir","0",this.callback)},"should not return with error":assert.isNull,"should return with a name":Test.assertName,"should not exist":function(e,t){assert.ok(!existsSync(t),"Directory should be removed")}},"non graceful testing":{topic:function(){Test.testGraceful("dir","0",this.callback)},"should not return with error":assert.isNull,"should return with a name":Test.assertName,"should be a dir":function(e,t){_testDir(16832)(e,t);fs.rmdirSync(t)}},"graceful testing":{topic:function(){Test.testGraceful("dir","1",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should not exist":function(e,t){assert.ok(!existsSync(t),"Directory should be removed")}},"unsafeCleanup === true":{topic:function(){Test.testUnsafeCleanup("1",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should not exist":function(e,t){assert.ok(!existsSync(t),"Directory should be removed")},"should remove symlinked dir":function(e,t){assert.ok(!existsSync(t+"/symlinkme-target"),"should remove target")},"should not remove contents of symlink dir":function(e,t){assert.ok(existsSync(__dirname+"/symlinkme/file.js"),"should not remove symlinked directory's content")}},"unsafeCleanup === false":{topic:function(){Test.testUnsafeCleanup("0",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a directory":_testDir(16832)}}).exportTo(module);